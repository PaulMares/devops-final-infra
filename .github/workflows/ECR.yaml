name: Nightly ECR Push

on:
  schedule:
    - cron: '0 8 * * *'  # Midnight Pacific Time (UTC-8 â†’ 08:00 UTC)
  workflow_dispatch:     # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ frontend, backend, api-1, api-2 ]

    env:
      ECR_URI: public.ecr.aws/g1l2p8r3
      REPO_PREFIX: devops-final
      NAMESPACE: qa

    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v3

      - name: Clone source repo
        run: git clone https://github.com/PaulMares/crud-react-node-mySQL-go.git source

      - name: Check if ${{ matrix.service }} has changed
        id: changed
        working-directory: source
        run: |
          git fetch origin main
          git checkout main

          BASE_SHA=$(git rev-parse HEAD~1)
          HEAD_SHA=$(git rev-parse HEAD)

          echo "Comparing $BASE_SHA to $HEAD_SHA for service: ${{ matrix.service }}"

          if git diff --name-only $BASE_SHA $HEAD_SHA | grep "^${{ matrix.service }}/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "image_tag=${HEAD_SHA:0:7}" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit if service unchanged
        if: steps.changed.outputs.changed != 'true'
        run: echo "${{ matrix.service }} has not changed. Skipping build and deploy."

      - name: Configure AWS credentials
        if: steps.changed.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        if: steps.changed.outputs.changed == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image to ECR
        if: steps.changed.outputs.changed == 'true'
        run: |
          IMAGE_TAG=${{ steps.changed.outputs.image_tag }}
          SERVICE=${{ matrix.service }}
          
          docker build -t $ECR_URI/$REPO_PREFIX/$SERVICE:$IMAGE_TAG ./source/$SERVICE
          docker push $ECR_URI/$REPO_PREFIX/$SERVICE:$IMAGE_TAG
          
          docker tag $ECR_URI/$REPO_PREFIX/$SERVICE:$IMAGE_TAG $ECR_URI/$REPO_PREFIX/$SERVICE:latest
          docker push $ECR_URI/$REPO_PREFIX/$SERVICE:latest

      - name: Update kubeconfig
        if: steps.changed.outputs.changed == 'true'
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Blue/green deploy to QA
        if: steps.changed.outputs.changed == 'true'
        run: |
          SERVICE=${{ matrix.service }}
          IMAGE_TAG=${{ steps.changed.outputs.image_tag }}
          
          CURRENT_COLOR=$(kubectl get svc $SERVICE -n $NAMESPACE -o jsonpath='{.spec.selector.color}')
          if [ "$CURRENT_COLOR" = "green" ]; then NEW_COLOR=blue; else NEW_COLOR=green; fi
          
          echo "Deploying $SERVICE to $NEW_COLOR in namespace $NAMESPACE using tag $IMAGE_TAG"
          
          # Update image
          kubectl set image deployment/$SERVICE-$NEW_COLOR \
            $SERVICE=$ECR_URI/$REPO_PREFIX/$SERVICE:$IMAGE_TAG -n $NAMESPACE
          
          # Wait for rollout
          kubectl rollout status deployment/$SERVICE-$NEW_COLOR -n $NAMESPACE
          
          # Swap traffic
          kubectl patch service $SERVICE -n $NAMESPACE -p \
            "{\"spec\": {\"selector\": {\"app\": \"$SERVICE\", \"color\": \"$NEW_COLOR\"}}}"